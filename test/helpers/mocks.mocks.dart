// Mocks generated by Mockito 5.4.6 from annotations
// in fulminant_c/test/helpers/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:fulminant_c/models/course.dart' as _i2;
import 'package:fulminant_c/models/user.dart' as _i3;
import 'package:fulminant_c/repositories/auth_repository.dart' as _i4;
import 'package:fulminant_c/repositories/course_repository.dart' as _i7;
import 'package:fulminant_c/repositories/leaderboard_repository.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCourse_0 extends _i1.SmartFake implements _i2.Course {
  _FakeCourse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeModule_1 extends _i1.SmartFake implements _i2.Module {
  _FakeModule_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_3 extends _i1.SmartFake implements _i3.User {
  _FakeUser_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i4.AuthRepository {
  @override
  _i5.Stream<_i6.User?> get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _i5.Stream<_i6.User?>.empty(),
        returnValueForMissingStub: _i5.Stream<_i6.User?>.empty(),
      ) as _i5.Stream<_i6.User?>);

  @override
  _i5.Future<void> signUp({
    required String? email,
    required String? password,
    required String? fullName,
    required DateTime? dateOfBirth,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
            #fullName: fullName,
            #dateOfBirth: dateOfBirth,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.User?> getUserData(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [userId],
        ),
        returnValue: _i5.Future<_i3.User?>.value(),
        returnValueForMissingStub: _i5.Future<_i3.User?>.value(),
      ) as _i5.Future<_i3.User?>);

  @override
  _i5.Future<void> updateUserData(_i3.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUserData,
          [user],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateUserProfile(
    String? userId,
    String? fullName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [
            userId,
            fullName,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [CourseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseRepository extends _i1.Mock implements _i7.CourseRepository {
  @override
  _i5.Future<List<_i2.Course>> getCourses() => (super.noSuchMethod(
        Invocation.method(
          #getCourses,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Course>>.value(<_i2.Course>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Course>>.value(<_i2.Course>[]),
      ) as _i5.Future<List<_i2.Course>>);

  @override
  _i5.Future<_i2.Course> getCourse(String? courseId) => (super.noSuchMethod(
        Invocation.method(
          #getCourse,
          [courseId],
        ),
        returnValue: _i5.Future<_i2.Course>.value(_FakeCourse_0(
          this,
          Invocation.method(
            #getCourse,
            [courseId],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Course>.value(_FakeCourse_0(
          this,
          Invocation.method(
            #getCourse,
            [courseId],
          ),
        )),
      ) as _i5.Future<_i2.Course>);

  @override
  _i5.Future<List<_i2.Module>> getCourseModules(String? courseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourseModules,
          [courseId],
        ),
        returnValue: _i5.Future<List<_i2.Module>>.value(<_i2.Module>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.Module>>.value(<_i2.Module>[]),
      ) as _i5.Future<List<_i2.Module>>);

  @override
  _i5.Future<_i2.Module> getModule(String? moduleId) => (super.noSuchMethod(
        Invocation.method(
          #getModule,
          [moduleId],
        ),
        returnValue: _i5.Future<_i2.Module>.value(_FakeModule_1(
          this,
          Invocation.method(
            #getModule,
            [moduleId],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Module>.value(_FakeModule_1(
          this,
          Invocation.method(
            #getModule,
            [moduleId],
          ),
        )),
      ) as _i5.Future<_i2.Module>);

  @override
  _i5.Future<List<_i2.UserProgress>> getUserProgress(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProgress,
          [userId],
        ),
        returnValue:
            _i5.Future<List<_i2.UserProgress>>.value(<_i2.UserProgress>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.UserProgress>>.value(<_i2.UserProgress>[]),
      ) as _i5.Future<List<_i2.UserProgress>>);

  @override
  _i5.Future<void> updateUserProgress(_i2.UserProgress? progress) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProgress,
          [progress],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> completeModule(
    String? userId,
    String? courseId,
    String? moduleId,
    int? points,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeModule,
          [
            userId,
            courseId,
            moduleId,
            points,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> completeActivity(
    String? userId,
    String? courseId,
    String? moduleId,
    String? activityId,
    int? points,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeActivity,
          [
            userId,
            courseId,
            moduleId,
            activityId,
            points,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [LeaderboardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeaderboardRepository extends _i1.Mock
    implements _i8.LeaderboardRepository {
  @override
  _i5.Future<List<_i3.User>> getTopUsers({int? limit = 50}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopUsers,
          [],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i5.Future<List<_i3.User>>);

  @override
  _i5.Future<_i8.UserRank?> getUserRank(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserRank,
          [userId],
        ),
        returnValue: _i5.Future<_i8.UserRank?>.value(),
        returnValueForMissingStub: _i5.Future<_i8.UserRank?>.value(),
      ) as _i5.Future<_i8.UserRank?>);

  @override
  _i5.Future<List<_i3.User>> getUsersAroundRank(
    String? userId, {
    int? range = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsersAroundRank,
          [userId],
          {#range: range},
        ),
        returnValue: _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i5.Future<List<_i3.User>>);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i3.User {
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  String get fullName => (super.noSuchMethod(
        Invocation.getter(#fullName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#fullName),
        ),
        returnValueForMissingStub: _i9.dummyValue<String>(
          this,
          Invocation.getter(#fullName),
        ),
      ) as String);

  @override
  DateTime get dateOfBirth => (super.noSuchMethod(
        Invocation.getter(#dateOfBirth),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#dateOfBirth),
        ),
        returnValueForMissingStub: _FakeDateTime_2(
          this,
          Invocation.getter(#dateOfBirth),
        ),
      ) as DateTime);

  @override
  int get points => (super.noSuchMethod(
        Invocation.getter(#points),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  DateTime get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#createdAt),
        ),
        returnValueForMissingStub: _FakeDateTime_2(
          this,
          Invocation.getter(#createdAt),
        ),
      ) as DateTime);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
        returnValueForMissingStub: <Object>[],
      ) as List<Object>);

  @override
  _i3.User copyWith({
    String? id,
    String? email,
    String? fullName,
    DateTime? dateOfBirth,
    int? points,
    DateTime? createdAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #id: id,
            #email: email,
            #fullName: fullName,
            #dateOfBirth: dateOfBirth,
            #points: points,
            #createdAt: createdAt,
          },
        ),
        returnValue: _FakeUser_3(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #id: id,
              #email: email,
              #fullName: fullName,
              #dateOfBirth: dateOfBirth,
              #points: points,
              #createdAt: createdAt,
            },
          ),
        ),
        returnValueForMissingStub: _FakeUser_3(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #id: id,
              #email: email,
              #fullName: fullName,
              #dateOfBirth: dateOfBirth,
              #points: points,
              #createdAt: createdAt,
            },
          ),
        ),
      ) as _i3.User);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
